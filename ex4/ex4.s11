tks = 177560
tkb = 177562
tps = 177564
tpb = 177566
lcs = 177546
lcs = 177546

. = torg + 1000

;;; MAIN ;;;

main:
        mov pc, sp              ; init the stack
        tst -(sp)
        mov #clock, @#100       ; clock interrupt vector initialization
        mov #300, @#102
        mov #getc, @#60         ; keyboard interrupt vector init
        mov #300, @#62

        mov #inputBuffer, r0    ; r0 points to input buffer
        mov #pNRows, -(sp)      ; prompt for number of rows
        jsr pc, puts
        mov r0, -(sp)           ; scan number of rows
        jsr pc, scanf
        jsr pc, atoi            ; convert to int
        mov (sp), nRows         ; Store in variable
        add #4, sp

        mov #pNCols, -(sp)      ; prompt for number of rows
        jsr pc, puts
        mov r0, -(sp)           ; scan number of cols
        jsr pc, scanf
        jsr pc, atoi            ; convert to int
        mov (sp), nCols         ; Store in variable
        add #4, sp
        
        mov #pBoard, -(sp)      ; prompt for the board
        jsr pc, puts
        mov #Board, -(sp)       ; read the board from the user
        jsr pc, scanf
        add #4, sp
        
        mov #pDuration, -(sp)   ; prompt for the game duration
        jsr pc, puts
        mov r0, -(sp)           ; scan game duration
        jsr pc, scanf
        jsr pc, atoi            ; convert to int
        mov (sp), secondsLeft   ; put duration in right place
        add #4, sp

        mov #mReady, -(sp)      ; print ready message
        jsr pc, puts
        mov secondsLeft, -(sp)
        jsr pc, numPrint
        mov #pReady, -(sp)
        jsr pc, puts
        add #6, sp

        jsr pc, waitForEnter    ; prompt to user to begin
        
        mov #1, r1              ; set implied move to eval the first board slot
        jsr pc, handleMove      ; handle implied move and prompt for the next
        mov #100, @#lcs         ; enable interrupts
        mov #101, @#tks
fiboRun:                        ; generate fibonacci numbers as random seed
        jsr pc, Fibo
        tst gameState
        beq fiboRun
mainReturn:
        jsr pc, printEndGame
        halt


;;; INTERRUPT HANDLERS ;;;

; Clock Interrupt Callback, called whenever cpu ticks & clock interrupt is enabled
clock:
        inc clockTicks          ; Increment counter of clock ticks
        cmp clockTicks, rate    ; if counter passed a time of a second
        blt clkEpilogue         
        clr clockTicks          ; reset counter of clock ticks
        dec secondsLeft         ; reduce the seconds left stopper
        bne clkEpilogue         ; when the seconds left reaches 0:
        mov #1, gameState       ; set game status to 1 (time's up)
        clr @#lcs               ; stop the clock
        clr @#tks               ; stop the keyboard
clkEpilogue:
        rti

; Keyboard interrupt handler. Called on every keyboard press.
; Builds an input line char-by-char and calls the handler function on enter.
getc:
        mov r2, -(sp)           ; save registers
        mov r3, -(sp)

        mov inputOffset, r3     ; r3 holds the current offset in buffer
        movb @#tkb, r2          ; Put read char in r2
        cmp r2, #13.            ; check if user pressed enter
        beq getcEnter
        cmp r2, #8.             ; check if user pressed backspace
        bne getcNormal
        jsr pc, handleBackspace
        jmp getcEpilogue
getcNormal:
        jsr pc, putc            ; print char
        movb r2, inputBuffer(r3); put read char in the buffer
        inc r3                  ; increase the buffer offset
        jmp getcEpilogue
getcEpilogue:                   ; Normal epilogue (no need to call handler)
        mov r3, inputOffset     ; store offset for next run
        mov (sp)+, r2           ; restore registers
        mov (sp)+, r3
        inc @#tks               ; enable keyboard read
        rti
getcEnter:                      ; Line has ended
        clr @#lcs               ; disable timer
        movb #0, inputBuffer(r3); terminate input string
        jsr pc, parseMove       ; process the input
        tst gameState           ; Test if game has ended
        bne getcEEnd            ; if game is still on:
        clr inputOffset         ; reset input offset for next line
        mov #100, @#lcs         ; re-enable timer
        inc @#tks               ; enable keyboard read
getcEEnd:
        mov (sp)+, r2           ; restore registers
        mov (sp)+, r3
        rti

;;; SYNC IO ;;;

; Link Register: pc
waitForEnter:
        mov r0, -(sp)           ; save registers
        mov #1, @#tks           ; enable keyboard read
wFELoop:
        tstb @#tks              ; Check if keyboard is ready
        bpl wFELoop             ; if not branch to loop again
        mov @#tkb, r0           ; read character
        cmp r0, #13.            ; check for enter
        beq wFEEpilogue
        mov #1, @#tks           ; enable keyboard read
        br wFELoop
wFEEpilogue:
        mov (sp)+, r0           ; restore registers
        rts pc
        
; Link Register: pc
; Arguments:    2(sp) - a pre allocated buffer to put input line in
; Return:       Null terminated string will be written to destination buffer
scanf:
        mov r2, -(sp)           ; save registers
        mov r3, -(sp)
        mov r4, -(sp)
        mov 10(sp), r4          ; r4 points to the input buffer
        mov #0, r3              ; r3 contains counter for chars read so far
        mov #1, @#tks           ; enable keyboard read
getCharLoop:                    ; Main read loop which ends only when 
                                ; user press enter or if time is over
        tstb @#tks              ; Check if keyboard is ready
        bpl getCharLoop         ; if not branch to loop again

        movb @#tkb, r2          ; Put read char in r2
        mov #1, @#tks           ; enable keyboard read

        cmp r2, #13.            ; check if user pressed enter
        beq scfEpilogue         ; if so - finish scanf
        cmp r2, #8.             ; check if char is backspace
        beq scfBackspace
        jsr pc, putc            ; if char is not enter nor backspace - print it!
        movb r2, (r4)           ; Move char read to input buffer
        inc r3                  ; inc char counter
        inc r4                  ; inc buffer pointer
        jmp getCharLoop
scfBackspace:
        mov 10(sp), r4          ; reset r4 pointer
        jsr pc, handleBackspace
        add r3, r4              ; use new r3 as the correct offset into buffer
        jmp getCharLoop
scfEpilogue:
        movb #0, (r4)           ; add null-terminating char to buffer end
        mov (sp)+, r4
        mov (sp)+, r3
        mov (sp)+, r2
        rts pc

; Link register - pc
; Arguments - r3 - number of chars read
handleBackspace:
        mov r2, -(sp)           ; save r2

        cmp r3, #0              ; check if backspace was read as first char
        beq hBEpilogue          ; if so do nothing
        jsr pc, putc            ; write backspace to move cursor left
        mov #32., r2            ; write space to override last written char
        jsr pc, putc
        mov #8., r2             ; write backspace to move cursor left
        jsr pc, putc
        dec r3                  ; move buffer pointer one slot backwards
hBEpilogue:
        mov (sp)+, r2           ; restore r2
        rts pc
        
; Link register: pc
; Arguments: r2 - Character to print
putc:
    tstb @#tps          ; Wait until printer is ready
    bpl putc
    movb r2, @#tpb      ; send char to the printer
    rts pc

; Link register: pc
; Arguments: 2(sp) - Pointer to null-terminated string
puts:
    mov r0, -(sp)       ; save registers
    mov r2, -(sp)
    mov 6(sp), r0
psLoop:                 ; print a character at a time
    movb (r0), r2       ; Fetch character to print
    beq psEpilogue      ; test if string has ended
    jsr pc, putc        ; Print
    inc r0              ; increase r0 to get the next char
    br psLoop           ; loop
psEpilogue:             ; string has ended
    mov (sp)+, r2       ; restore registers
    mov (sp)+, r0
    rts pc

;;; STRING AND CHARACTER MANIPULATION ;;;

; Link Register: pc
; Arguments:    2(sp) - pointer to a string of numbers. Will stop on the first
;                       non-octal-digit character.
; Return:       2(sp) will contain a word of the converted string, or 0 if no
;               conversion could be made
atoi:
        mov r0, -(sp)
        mov r1, -(sp)
        mov r2, -(sp)
        mov 10(sp), r2          ; r2 points to the given string
        clr r0
atoiLoop:
        movb (r2)+, r1          ; Fetch character to convert
        sub #60, r1             ; Convert to digit
        cmp r1, #7              ; Check value is a digit
        bhi atoiEpilogue
        ash #3, r0              ; Add another digit in the converted number
        add r1, r0              ; Add the recently scanned digit
        br atoiLoop
atoiEpilogue:
        mov r0, 10(sp)          ; store return value
        mov (sp)+, r2           ; restore registers
        mov (sp)+, r1
        mov (sp)+, r0
        rts pc

; Link register: pc
; Arguments: 2(pc) - number to print
numPrint:
    mov r0, -(sp)       ; save registers
    mov r1, -(sp)
    mov r2, -(sp)
    mov r3, -(sp)
    mov 12(sp), r0      ; fetch argument
    clr r3              ; r3 holds the number of digits
nmpDiv:                 ; Break the number to digits and push them to stack
                        ; pushing to stack reverses order, needed for printing
    mov r0, r1          ; r1 holds the digit
    clr r0              ; r0 will hold the digit after division
    div #10, r0         ; divide by 10 to separate the digits
    mov r1, -(sp)       ; push to stack
    inc r3              ; bump digit count
    tst r0
    bne nmpDiv          ; move on to the next digit if there are left
nmpPrint:               ; print the digits from the stack
    mov (sp)+, r2       ; r2 holds the digit to print
    add #60, r2         ; convert to ascii code
    jsr pc, putc        ; print
    sob r3, nmpPrint    ; loop to next digit. r3 holds the digit count
npmEpilogue:
    mov (sp)+, r3       ; restore registers
    mov (sp)+, r2
    mov (sp)+, r1
    mov (sp)+, r0
    rts pc
     
;;; GAME UI FUNCTIONS ;;;

; Link register: pc
; Uses shared spaces: Board, nRows, nCols, currentX, currentY
printBoard:
    mov r0, -(sp)       ; save registers
    mov r1, -(sp)
    mov r2, -(sp)
    mov #1, r0          ; init X coordinate to leftest column
    mov nRows, r1       ; init current row to top row
    mov #mCurBoard, -(sp)   ; print header
    jsr pc, puts
    tst (sp)+
pLoop:
    cmp r0, currentX    ; Test if we reached the current location (x then y)
    bne pLBoardItem
    cmp r1, currentY
    bne pLBoardItem
    mov #'*, r2         ; Print * for current location
    jsr pc, putc
    ;jsr pc, boardItemPrint
    br pLNextBlock
pLBoardItem:            ; not current location, print the board item
    mov r0, -(sp)       ; Get current board item. Will be returned in r0
    mov r1, -(sp)
    jsr pc, getCurrentBoardItem
    mov r0, r2          ; r2 holds the board item to print
    tst (sp)+
    mov (sp)+, r0       ; restore r0
    jsr pc, putc
    ;jsr pc, boardItemPrint
pLNextBlock:            ; Print a seperator before the next block and
                        ; move cursor
    cmp r0, nCols       ; Check if we reached the end of the row
    beq pLEndRow
    inc r0              ; Row didnt end, increase X coordinate
    mov #' , r2         ; Print a space after the current item
    jsr pc, putc
    br pLoop            ; Loop for the next board item
pLEndRow:
    mov #newline, -(sp)  ; Print a new line after the current item
    jsr pc, puts
    tst (sp)+
    mov #1, r0          ; Reset X coordinate
    sob r1, pLoop       ; Move to the next row, quit if we reached the end
pEpilogue:
    mov (sp)+, r2       ; Restore registers
    mov (sp)+, r1
    mov (sp)+, r0
    rts pc 
newline: .byte '\n, '\r, 0, 0

; Link register: pc
promptMove:
    mov #mCurScore, -(sp)    ; print current score
    jsr pc, puts
    mov Score, (sp)
    jsr pc, numPrint
    mov #mRemTime, (sp)      ; print remaning time
    jsr pc, puts
    mov secondsLeft, (sp)
    jsr pc, numPrint
    mov #mLuckyNum, (sp)     ; prompt for lucky number
    jsr pc, puts

    tst (sp)+               ; pop the stack
    rts pc

; Link register: pc
; Arguments: inputBuffer, in shared space.
parseMove:
    mov r0, -(sp)           ; save registers
    mov r1, -(sp)

    mov #inputBuffer, -(sp) ; convert input line to int
    jsr pc, atoi
    
    mov Y, r1               ; prepare last fibo result for dice roll
    clr r0
    div (sp), r0            ; get dice roll via (fibo rum)mod(input) 
    inc r1                  ; dice can't be zero
    mov #mDice, (sp)         ; print dice result
    jsr pc, puts
    mov r1, (sp)
    jsr pc, numPrint
    tst (sp)+
    jsr pc, handleMove      ; now do the actual move

    mov (sp)+, r1           ; restore registers
    mov (sp)+, r0
    rts pc

; Link register: pc
; Arguments: r1 - Dice roll
; Return: updates gameState in shared space
handleMove:
    mov r2, -(sp)           ; save registers
    jsr pc, movePlayer      ; move the player according to dice roll
    jsr pc, printBoard
    tst r2                  ; check move was legal (-1 if not)
    bmi hndlBadMove
    add r2, Score           ; Update the player's score
    jsr pc, isAtLastPosition; Check if player reached the end of the board
    tst r2
    beq hndlWin
    jsr pc, promptMove      ; normal move, prompt for next move then
    br hMEpilogue
hndlWin:                    ; the player won!
    mov #3, gameState       ; mark game status as 3 (player won)
    br hMEpilogue
hndlBadMove:                ; the player did an illegal move
    mov #2, gameState       ; mark game status as 2 (player lost)
hMEpilogue:
    mov (sp)+, r2           ; restore registers
    rts pc

; Link register: pc    
printEndGame:
    cmp gameState, #1       ; check for time's up
    bne winOrLose
    mov #mTimeUp, -(sp)
    jsr pc, puts
    br pFinalScore
winOrLose:
    cmp gameState, #2       ; check if player lost
    bne playerWon
    mov #mFailure, -(sp)
    jsr pc, puts
    br prEpilogue
playerWon:
    mov #mFinalSlot, -(sp)
    jsr pc, puts
pFinalScore:
    mov #mScore, (sp)
    jsr pc, puts
    mov Score, (sp)
    jsr pc, numPrint
prEpilogue:
    tst (sp)+
    rts pc

;;; GAME LOGIC ;;;

; Link register: pc
; Params:       r1 - Move
; Return:       r2 - Target slot value if move was legal, -1 if illegal
movePlayer:
        mov r0, -(sp)           ; save registers
        mov r1, -(sp)
MPLoop:                         ; a loop which forwards the player 
                                ; the same amount of steps
                                ; as the move dictates
        cmp r1, #0              ; if we finished forwarding the player
        beq getNextStartingPos
        dec r1                  ; r1 holds how many steps left to forward, 
                                ; so it gets decreased by one
                                ; each time we move it one step 
        mov currentY, r0
        asr r0
        bcs moveRight           ; check if current row is even
                                ; if it's even we move the player left
                                ; and if odd we move it to the right
moveLeft:
        cmp currentX, #1        ; check if we are at the first column
        beq moveUp              ; then we need to move it up
        dec currentX            ; if not - just move it one step to the left
        jmp MPLoop
moveRight:
        cmp currentX, nCols     ; check if we are at the last column
        beq moveUp              ; then we need to move it up
        inc currentX            ; if not - just move is one step to the right
        jmp MPLoop
moveUp:
        cmp currentY, nRows     ; check if we are already at the last row
        beq MPError             ; if so - we exceeded the finish position 
                                ; and raise error
        inc currentY            ; if not - just move it step upwords
        jmp MPLoop
getNextStartingPosition:        ; check where the player is at 
                                ; and act accordingly

        mov currentX, -(sp)
        mov currentY, -(sp)
        jsr pc, getCurrentBoardItem
        add #4, sp
checkCurrentBoardItem:
        cmp r0, #'L             ; if the player is on a ladder
        beq onLadder            
        cmp r0, #'S             ; if the player is on a snake
        bne doneMove
onSnake:
        cmp currentY, #1        ; check if the player is on the first row
        beq MPError             ; if so - we cannot go further down, 
                                ; raise exception
        dec currentY            ; if not - decrease current row value
        br getNextStartingPosition      ; check again where the player 
                                        ; is at and act accordingly
onLadder:
        cmp currentY, nRows     ; check if the player is on the last row
        beq MPError             ; if so - we cannot go further up, raise exception
        inc currentY            ; if not - increase current row value
        br getNextStartingPosition      ; check again where the player is at 
                                        ; and act accordingly
doneMove:                       ; the player finished executing the move, 
                                ; and now he is at a numbered square 
                                ; (not ladder nor snake).
                                ; r0 holds the current square value
        sub #60, r0             ; convert to int
        mov r0, r2              ; Return the current value
        jmp MPEpilogue
MPError:
        clr currentX            ; zero coordinates so they won't appear on board
        clr currentY 
        mov #-1, r2
MPEpilogue:
        mov (sp)+, r0
        mov (sp)+, r1
        rts pc

; Link register: pc
; Params:       currentY, currentX - shared space
; Return:       r2 - 0 if current is final square or 1 otherwise
isAtLastPosition:
        mov currentY, r2
        cmp r2, nRows           ; check if currentY is at top row
        bne notLastPosition
        asr r2
        bcs mostRightColCheck   ; check if top row is even
mostLeftColCheck:               ; If we are at even row,
                                ; we finish at the most right square
        cmp currentX, #1
        bne notLastPosition
        jmp atLastPosition
mostRightColCheck:              ; else - we finish at the most left square
        cmp currentX, nCols
        beq atLastPosition
notLastPosition:
        mov #1, r2
        rts pc
atLastPosition:
        mov #0, r2
        rts pc

; Link register: pc
; Params:       2(sp) - currentY
;               4(sp) - currentX
; Return:       r0 - Board item at [currentX, currentY]
getCurrentBoardItem:            
        mov r1, -(sp)

        mov nRows, r0     
        sub 4(sp), r0           ; r0 now holds [nRows - currentY]
        mul nCols, r0           ; r1 now holds the the board index to the beginning of the current row
        add 6(sp), r1        
        dec r1                  ; r1 now holds the board index to the current position
        movb Board(r1), r0      ; r0 now holds the board value at r1 index

        mov (sp)+, r1
        rts pc

;;; AUXILLARY ;;;

; Link Register: pc
; Arguments: X,Y at shared space
Fibo:
        mov r0, -(sp)
        cmp Y, #1000
        bge FiboReset
        mov X, r0
        mov Y, X
        add r0, Y
        jmp FiboEpilogue
FiboReset:
        mov #1, X
        mov #1, Y
FiboEpilogue:
        mov (sp)+, r0
        rts pc

;;; GLOBAL VARIABLES ;;;

; Game state

; currentX and currentY are used to describe the current player position.
; currentX describe the current Column, and currentY current Row
; both values ranges from 1 to nCols/nRows, 
; while the first position the player begins
; at is [1,1] and the last ending position is [nCols, nRows]
.even
currentX: .word 0
currentY: .word 1

Score: .blkw 1
secondsLeft: .blkw 10
; 0 - game in progress; 1 - time's up; 2 - invalid move; 3 - player won
gameState: .word 0

; Game settings
Board: .blkw 60
nRows: .blkw 4
nCols: .blkw 4

; Program aux state
clockTicks: .blkw 10
inputBuffer: .blkw 60
inputOffset: .word 0

; Messages strings
.even
pNRows: .ascii<\r\nPlease enter the number of rows:\r\n\0>
.even
pNCols: .ascii<\r\nPlease enter the number of columns:\r\n\0>
.even
pBoard: .ascii<\r\nPlease enter the board:\r\n\0>
.even
pDuration: .ascii<\r\nPlease enter game duration in seconds:\r\n\0>
.even
mReady: .ascii<\r\nWe are all set. Total time: \0>
.even
pReady: .ascii< sec\r\nPress Enter key when you are ready...\0>
.even
mCurBoard: .ascii<\r\nCurrent Board:\r\n\0>
.even
mCurScore: .ascii<The current score is: \0>
.even
mRemTime: .ascii<\r\nThe remaining time is: \0>
.even
mLuckyNum: .ascii<\r\n\r\nSelect your lucky number: \0>
.even
mDice: .ascii<\r\nThe dice shows: \0>
.even
mScore: .ascii<The final score is: \0>
.even
mFinalSlot: .ascii<You have reached the final slot, the game ends successfully!\r\n\0>
.even
mFailure: .ascii<\r\nIllegal move, the game ended in failuare!!!\r\n\0>
.even
mTimeUp: .ascii<\r\nTime's up, the game ends successfully!\r\n\0>

.=torg + 12000

rate:   .word 100
X:      .word 1
Y:      .word 1


