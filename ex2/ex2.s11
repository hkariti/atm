. = torg + 1000

main:   
        mov pc, sp              ; init the stack and all global variables
        tst -(sp)
        mov #1, currentX        ; we start at position [1,1] (see below for current position explanation)
        mov #1, currentY        
        clr numMoves
        clr Score
        
        mov #Moves, r5          ; r5 holds a pointer to Moves array, doesn't changed through all program

mainLoopStart:                  ; The main loop which iterates through all Moves and execute them
        movb (r5)+, r1          ; r1 holds current Move value (how many steps to forward)
        cmp r1, #'@             ; if we got to the end of Moves array
        beq finishedAllMoves    
        inc numMoves

movePlayer:                     ; a loop which forwards the player the same amount of steps
                                ; as pointed in Moves array
        cmp r1, #0              ; if we finished forwarding the player
        beq getNextStartingPos
        dec r1                  ; r1 holds how many steps left to forward, so it gets decreased by one
                                ; each time we move it one step 
        mov currentY, r0
        asr r0
        bcs moveRight           ; check if current row is even
                                ; if it's even we move the player left
                                ; and if un-even we move it to the right
moveLeft:
        cmp currentX, #1        ; check if we are at the first column
        beq moveUp              ; then we need to move it up
        dec currentX            ; if not - just move it one step to the left
        jmp movePlayer
moveRight:
        cmp currentX, nCols     ; check if we are at the last column
        beq moveUp              ; then we need to move it up
        inc currentX            ; if not - just move is one step to the right
        jmp movePlayer
moveUp:
        cmp currentY, nRows     ; check if we are already at the last row
        beq errorPastLimit      ; if so - we exceeded the finish position and raise error
        inc currentY            ; if not - just move it step upwords
        jmp movePlayer
errorPastLimit:                 ; raise error - we already passed the finish line
        mov #'F, Output         
        mov #2, Score
        halt

getNextStartingPosition:        ; check where the player is at and act accordingly
        jsr pc, getCurrentBoardItem     ; r0 will hold the current board item value
        cmp r0, #'L             ; if the player is on a ladder
        beq onLadder            
        cmp r0, #'S             ; if the player is on a snake
        bne doneMove
onSnake:
        cmp currentY, #1        ; check if the player is on the first row
        beq errorSnakeAtBottom  ; if so - we cannot go further down, raise exception
        dec currentY            ; if not - decrease current row value
        br getNextStartingPosition      ; check again where the player is at and act accordingly
onLadder:
        cmp currentY, nRows     ; check if the player is on the last row
        beq errorLadderAtTop    ; if so - we cannot go further up, raise exception
        inc currentY            ; if not - increase current row value
        br getNextStartingPosition       ; check again where the player is at and act accordingly
errorSnakeAtBottom:             ; raise error - player got a snake on first row
        mov #'F, Output
        mov #0, Score
        halt
errorLadderAtTop:               ; raise error - player got a ladder on top floor
        mov #'F, Output 
        mov #1, Score
        halt

doneMove:                       ; the player finished executing the move, and now he is at 
                                ; a numbered square (not ladder nor snake).
                                ; r0 holds the current square value
        add r0, Score           ; add the current number to score
        jmp mainLoopStart       ; fetch another move and execute it!


finishedAllMoves:               ; we got here when the player finished executing all moves
                                ; check if the current position is the last position,
                                ; if so - the player didn't accomplish the game ): raise exception
        cmp currentY, nRows
        bne errorFinishedAtWrongPlace
        cmp currentX, nCols
        bne errorFinishedAtWrongPlace
        
finishSuccess:                  ; the player ACCOMPLISHED THE GAME (: !! return success!
        mov #'S, Output
        halt

errorFinishedAtWrongPlace:      ; raise error - the player didn't finish at the last square
        mov #'F, Output
        mov #3, Score
        halt


; This function fetches the current board item at [currentX, currentY]
; The value is returned in r0
; Uses PC as register link
getCurrentBoardItem:
        mov r1, -(sp)           ; push r1 to the stack as we are going to use it

        mov nRows, r0     
        sub currentY, r0        ; r0 now holds [nRows - currentY]
        mul nCols, r0           ; r1 now holds the the board index to the beginning of the current row
        add currentX, r1        
        dec r1                  ; r1 now holds the board index to the current position
        movb Board(r1), r0      ; r0 now holds the board value at r1 index


        mov (sp)+, r1           ; pop r1 back from the stack
        rts pc

; currentX and currentY are used to describe the current player position.
; currentX describe the current Column, and currentY current Row
; both values ranges from 1 to nCols/nRows, while the first position the player begins
; at is [1,1] and the last ending position is [nCols, nRows]
currentX: .word 0
currentY: .word 1

