. = torg + 1000

main:
        mov pc, sp              ; init the stack and all global variables
        tst -(sp)
        mov #-1, MovesScore
        mov #-1, MovesShort

        jsr pc, checkBoard
        cmp r4, #0
        bne mainReturn
        mov #MovesScore, -(sp)
        mov numMoves, -(sp)
        jsr pc, findScore
        add #4, sp
        mov $MovesShort, -(sp)
        mov numMoves, -(sp)
        jsr pc, findShortest
        add #4, sp
mainReturn:
        halt

findScore:
        mov r0, -(sp)  
        mov r1, -(sp)
        mov r2, -(sp)
        mov r4, -(sp)

        mov 12(sp), r0           ; r0 holds numMoves
        mov 14(sp), r2           ; r2 holds pointer to movesScore
        sub #2, sp
        mov sp, r1              ; r1 holds max_score
        clr (r1)
        mov r0, r4
        asr r4
        bcc allocateCacheMovesArray
        inc r4        
allocateCacheMovesArray:
        asl r4
        sub r4, sp                                              ;;;;;; need to check uneven move array byte size
        mov #'@, -(sp)
        mov sp, r4              ; r4 holds cache_move_array
        mov r0, -(sp)
        jsr pc, fndScoreRecursion
        add r4, sp
        add #6, sp

        mov (sp)+, r4
        mov (sp)+, r2
        mov (sp)+, r1
        mov (sp)+, r0
        rts pc


; Params:
; r1 - source move array
; r3 - dest move array
copyMovesArray:
        mov r0, -(sp)
        mov r3, -(sp)
        mov r4, -(sp)
        clr r0
cpyMovesLoop:
        movb (r4), r0
        movb (r4)+, (r3)+
        cmp r0, #'@
        bne cpyMovesLoop
        mov (sp)+, r4
        mov (sp)+, r3
        mov (sp)+, r0
        rts pc


; Params:
; r4 - moves array to add moves to, doesnt changed during runtime
; r0 - move number to add
changeLastMove:
        mov r4, -(sp)
        mov r1, -(sp)
chgLstMovLoop:
        movb (r4)+, r1
        cmp r1, #'@
        bne chgLstMovLoop
        sub #2, r4
        movb r0, (r4)
        mov (sp)+, r1
        mov (sp)+, r4
        rts pc        


; r1 - max_score, r2 - max_score_moves_array, r4 - current_move_array
fndScoreRecursion:
        mov r5, -(sp)
        mov 4(sp), r5   ; r5 contains numMoves
        mov r3, -(sp)
        mov r0, -(sp)
        sub #4, sp
        mov r1, (sp)    ; (sp) contains max_score pointer
        mov r2, 2(sp)   ; 2(sp) contains max_score_moves_array

        cmp r5, #0
        blt fndScrEpilogue

        jsr pc, solveGame       ; r3 contains game Score, r2 contains game Outpu
        cmp r2, #'S              ; check if solveGame Succeded
        beq slvGameSuccess
        cmp r3, #3              ; if failed not becaused haven't reached the end
        bne fndScrEpilogue

        mov r4, r0  
        mov #-1, r3      
fndScrGetMovesArraySize:
        movb (r0)+, r1
        inc r3                  ; r3 holds Moves array size
        cmp r1, #'@
        bne fndScrGetMovesArraySize
fndScrExtendMovesArray:
        movb #'@, (r0)
        movb #1, -(r0)

        mov #1, r0
        dec r5
        mov (sp), r1
        mov 2(sp), r2
fndScrLoop:
        cmp r0, #6
        bgt fndScrShortenMovesArray
        jsr pc, changeLastMove
        mov r5, -(sp)
        jsr pc, fndScoreRecursion
        mov (sp)+, r5
        inc r0
        jmp fndScrLoop

fndScrShortenMovesArray:
        cmp r3, #0              ; check if movesArray's length is ze
        beq fndScrEpilogue
        mov r4, r0
        add r3, r0
        movb #'@, (r0)
        jmp fndScrEpilogue

slvGameSuccess:
        cmp r3, @(sp)            ; check if current score is higher than max_score
        blt fndScrEpilogue
        mov r3, @(sp)            ; update max_score
        mov 2(sp), r3
        jsr pc, copyMovesArray
        jmp fndScrEpilogue

fndScrEpilogue:
        mov (sp), r1            ; (sp) contains max_score
        mov 2(sp), r2           ; 2(sp) contains max_score_moves_array
        add #4, sp
        mov (sp)+, r0
        mov (sp)+, r3
        mov (sp)+, r5
        rts pc

; Link register: pc
; Arguments: 2(sp) - max number of moves
;            4(sp) - address of moves array to put sequence of moves in
findShortest:
    mov r0, -(sp)
    mov r1, -(sp)
    mov r2, -(sp)
    mov r3, -(sp)
    mov r4, -(sp)
    mov r5, -(sp)
    mov 12(sp), r5              ; r5 holds the max number of moves
    beq findShortestEpilogue    ; don't do anything if max num of moves is zero
    mov 14(sp), r1              ; r1 holds a pointer to the moves array
    clr r2                      ; r2 hols the length of the current series
    mov r1, r3                  ; r3 holds the end of the of current series
fsLoopNumMoves:                 ; loop over series lengths
    inc r2
    inc r3
    mov #'@, (r3)               ; mark the end of the current series of moves
 fsLoopMoves:                   ; loop over all moves in the current length
    mov r2, r4                  ; checkSol expects the array address in r4
    jsr checkSol, pc            ; check our series of moves
    cmp r0, #-1
    bne findShortestEpilogue    ; If we found a valid move sequence, end
    mov r1, 6(pc)               ; arg1 for nextMoves in the first word inline
    mov r2, 2(pc)               ; arg2 for nextMoves in the second word inline
    jsr nextMoves, r5           
 argSize:    .word 0            ; placeholder for arg1 to nextMoves
 argPointer:  .word 0           ; placeholder for arg2 to nextMoves
    tst r4
    beq fsLoopMoves             ; try the next move if we didn't finish the
                                ; move series for this length
    sob r5, fsLoopNumMoves      ; try the next series length

fsFailure:
    mov #-1, (r1)               ; no successful move, put -1 in the moves array
findShortestEpilogue:
    mov (sp)+, r5
    mov (sp)+, r4
    mov (sp)+, r3
    mov (sp)+, r2
    mov (sp)+, r1
    mov (sp)+, r0
    rts pc
    
; Link register: r5
; Arguments:    (r5) - address of moves array
;               (r5+2) - size of moves array 
; Return:   r4 - 1 if moves overflowed (all moves previously were sixes),
;                0 otherwise
nextMoves:
    mov r0, -(sp)
    mov r1, -(sp)
    mov r2, -(sp)
    mov r3, -(sp)
    mov (r5)+, r0               ; r0 contains a pointer to the moves array
    mov (r5)+, r1               ; r1 contains the length of the moves array
    beq nextMovesEpilogue       ; don't do anything if the array is empty
    add r1, r0                  ; go to the end of the array
nextMovesInc:
    clr r2                      ; r2:r3 contain the one array element,
                                ; extended to 32 bit so we could use div
    movb -(r0), r3              ; fetch current element.
    inc r3
    div #7, r2                  ; make sure r3 is 6 and below
    movb r3, (r0)               ; store value after increment
    tst r2                      
    beq nextMovesEpilogue       ; return if the value after increment hasn't
                                ; reached 7 (i.e. quotient is 0)
    inc (r0)                    ; set element to 1
    sob r1, nextMovesInc        ; go and increment next digit
nextMovesEpilogue:
    mov r2, r4                  ; r4 holds the return value. will be 1 if the
                                ; last increment overflowed
    mov (sp)+, r3
    mov (sp)+, r2
    mov (sp)+, r1
    mov (sp)+, r0
    rts r5

; Return: r4 - 0 if board valid, 1 if invalid
checkBoard:
        mov r1, -(sp)
        mov r2, -(sp)
        mov #0, r1              ; r1 - currentX
        mov #1, r2              ; r2 - currentY
chkBrdEmpty:
        cmp #0, nCols
        bne chkBrdLoop
        cmp #0, nRows
        beq chkBrdSuccess
chkBrdLoop:
        cmp r1, nCols
        beq chkBrdLastCol
        inc r1
        jmp chkBrdValidCurrentItem
chkBrdLastCol:
        cmp r2, nRows
        bge chkBrdSuccess
        inc r2
        mov #1, r1
chkBrdValidCurrentItem:
        mov r1, -(sp)
        mov r2, -(sp)
        jsr pc, getCurrentBoardItem ; r0 now contains board[r1,r2] values
        add #4, sp
        cmp r0, #'L
        beq chkBrdLddrToSnake
        cmp r0, #'S
        beq chkBrdSnakeAtLastPos
        cmp r0, #0
        blt chkBrdFailure
        cmp r0, #50
        bgt chkBrdFailure
        jmp chkBrdLoop
chkBrdLddrToSnake:
        cmp r2, nRows
        beq chkBrdLoop
        mov r1, -(sp)
        mov r2, -(sp)
        inc (sp)        ; inc currentY sending to check
        jsr pc, getCurrentBoardItem ; r0 now contains board[r1,r2+1] values
        add #4, sp
        cmp r0, #'S
        beq chkBrdFailure
        jmp chkBrdLoop
chkBrdSnakeAtLastPos:
        mov r1, -(sp)
        mov r2, -(sp)
        jsr pc, isAtLastPosition
        add #4, sp
        cmp r0, 0
        beq chkBrdFailure
        jmp chkBrdLoop
chkBrdSuccess:
        mov #0, r4
        jmp chkBrdEpilogue
chkBrdFailure:
        mov #1, r4
chkBrdEpilogue:
        mov (sp)+, r2
        mov (sp)+, r1
        rts pc


; Params: r4 - moves array pointer
; Return: -1 if failed or Score if success, how to return!???????
checkSol:
        mov r2, -(sp)
        mov r3, -(sp)
        mov r4, -(sp)
        jsr pc, solveGame
        cmp r2, #'S
        bne chkSolReturnFail
        mov r3, r0
        jmp chkSolEpilogue
chkSolReturnFail:
        mov #-1, r0
chkSolEpilogue:
        mov (sp)+, r4
        mov (sp)+, r3
        mov (sp)+, r2
        rts pc

; Params: 
; r4 - pointer to Moves array, doesnt changed during run
; 
; Return:
; r2 - Output
; r3 - Score
solveGame:   
        mov r0, -(sp)
        mov r1, -(sp)
        mov r4, -(sp)


        mov #1, currentX        ; we start at position [1,1] (see below for 
                                ; current position explanation)
        mov #1, currentY        
        clr r3
        
mainLoopStart:                  ; The main loop which iterates through 
                                ; all Moves and execute them
        movb (r4)+, r1          ; r1 holds current Move value 
                                ; (how many steps to forward)
        cmp r1, #'@             ; if we got to the end of Moves array
        beq finishedAllMoves    

movePlayer:                     ; a loop which forwards the player 
                                ; the same amount of steps
                                ; as pointed in Moves array
        cmp r1, #0              ; if we finished forwarding the player
        beq getNextStartingPos
        dec r1                  ; r1 holds how many steps left to forward, 
                                ; so it gets decreased by one
                                ; each time we move it one step 
        mov currentY, r0
        asr r0
        bcs moveRight           ; check if current row is even
                                ; if it's even we move the player left
                                ; and if odd we move it to the right
moveLeft:
        cmp currentX, #1        ; check if we are at the first column
        beq moveUp              ; then we need to move it up
        dec currentX            ; if not - just move it one step to the left
        jmp movePlayer
moveRight:
        cmp currentX, nCols     ; check if we are at the last column
        beq moveUp              ; then we need to move it up
        inc currentX            ; if not - just move is one step to the right
        jmp movePlayer
moveUp:
        cmp currentY, nRows     ; check if we are already at the last row
        beq errorPastLimit      ; if so - we exceeded the finish position 
                                ; and raise error
        inc currentY            ; if not - just move it step upwords
        jmp movePlayer
errorPastLimit:                 ; raise error - we already passed the finish line
        mov #'F, r2         
        mov #2, r3
        jmp slvGameEpilogue
getNextStartingPosition:        ; check where the player is at 
                                ; and act accordingly

        mov currentX, -(sp)
        mov currentY, -(sp)
        jsr pc, getCurrentBoardItem
        add #4, sp
checkCurrentBoardItem:
        cmp r0, #'L             ; if the player is on a ladder
        beq onLadder            
        cmp r0, #'S             ; if the player is on a snake
        bne doneMove
onSnake:
        cmp currentY, #1        ; check if the player is on the first row
        beq errorSnakeAtBottom  ; if so - we cannot go further down, 
                                ; raise exception
        dec currentY            ; if not - decrease current row value
        br getNextStartingPosition      ; check again where the player 
                                        ; is at and act accordingly
onLadder:
        cmp currentY, nRows     ; check if the player is on the last row
        beq errorLadderAtTop    ; if so - we cannot go further up, raise exception
        inc currentY            ; if not - increase current row value
        br getNextStartingPosition      ; check again where the player is at 
                                        ; and act accordingly
errorSnakeAtBottom:             ; raise error - player got a snake on first row
        mov #'F, r2
        mov #0, r3
        jmp slvGameEpilogue
errorLadderAtTop:               ; raise error - player got a ladder on top floor
        mov #'F, r2 
        mov #1, r3
        jmp slvGameEpilogue

doneMove:                       ; the player finished executing the move, 
                                ; and now he is at a numbered square 
                                ; (not ladder nor snake).
                                ; r0 holds the current square value
        add r0, r3              ; add the current number to score
        jmp mainLoopStart       ; fetch another move and execute it!


finishedAllMoves:               ; we got here when the player finished 
                                ; executing all moves
                                ; check if the current position is 
                                ; the last position, if not - the player didn't 
                                ; accomplish the game ): raise exception
        mov currentX, -(sp)
        mov currentY, -(sp)
        jsr pc, isAtLastPosition
        add #4, sp
        cmp r0, 0
        bne errorFinishedAtWrongPlace
        
finishSuccess:                  ; the player ACCOMPLISHED THE GAME (: !! 
                                ; return success!
        mov #'S, r2
        jmp slvGameEpilogue

errorFinishedAtWrongPlace:      ; raise error - the player didn't finish 
                                ; at the last square
        mov #'F, r2
        mov #3, r3
        jmp slvGameEpilogue

slvGameEpilogue:
        mov (sp)+, r4
        mov (sp)+, r1
        mov (sp)+, r0
        rts pc

; currentX and currentY are used to describe the current player position.
; currentX describe the current Column, and currentY current Row
; both values ranges from 1 to nCols/nRows, 
; while the first position the player begins
; at is [1,1] and the last ending position is [nCols, nRows]
currentX: .word 0
currentY: .word 1




; fetches into r0 the current board item at [currentX, currentY]
; currentX & currentY are passed in the stack: currentY 2(sp), currentX 4(sp)
getCurrentBoardItem:            
        mov r1, -(sp)

        mov nRows, r0     
        sub 4(sp), r0        ; r0 now holds [nRows - currentY]
        mul nCols, r0           ; r1 now holds the the board index to the beginning of the current row
        add 6(sp), r1        
        dec r1                  ; r1 now holds the board index to the current position
        movb Board(r1), r0      ; r0 now holds the board value at r1 index

        mov (sp)+, r1
        rts pc



; check if the current position is the last positio
; currentX & currentY are passed in the stack: currentY 2(sp), currentX 4(sp)
; return 0 if true or 1 else at r0
isAtLastPosition:
        mov 2(sp), r0
        cmp 2(sp), nRows     ; check we finished at top row
        bne notLastPosition
        mov 2(sp), r0
        asr r0
        bcs mostRightColCheck     ; check if current row is even
mostLeftColCheck:         ; If we are at even row, 
                                ; we finish at the most right square
        cmp 4(sp), #1        
        bne notLastPosition
        jmp finishSuccess
mostRightColCheck:        ; else - we finish at the most left square
        cmp 4(sp), nCols
        beq atLastPosition
notLastPosition:
        mov #1, r0
        rts pc
atLastPosition:
        mov #0, r0
        rts pc




nCols:          .word   5
nRows:          .word   3
numMoves:       .word   4

Board:
                .byte   2, 3, 'S, 'L, 0
                .byte   5, 'L, 6, 'S, 6
                .byte   1, 'L, 'S, 1, 'L
.even
MovesShort: .blkw 10.

MovesScore: .blkw 10.
